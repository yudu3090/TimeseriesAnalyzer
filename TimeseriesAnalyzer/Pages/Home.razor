@page "/"
@using TimeseriesAnalyzer.Data
@using TimeseriesAnalyzer.Services
@inject BinanceService BinanceService

@if (loading)
{
    <p>Loading...</p>
}
else if (error != null)
{
    <p style="color:red;">Error: @error</p>
}
else
{
    <div class="container mt-5">
        <h3>Bitcoin Price</h3>
        <p>@price USD</p>
        <button class="btn btn-primary" @onclick="RefreshPrice">Refresh Price</button>
    </div>
}

<Chart />


<h3>Bitcoin Price Chart (Last 30 Days)</h3>

@if (historicalData == null)
{
    <p>Loading historical data...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Open</th>
            <th>High</th>
            <th>Low</th>
            <th>Close</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in historicalData)
        {
            <tr>
                <td>@item.OpenTime.ToShortDateString()</td>
                <td>@item.Open</td>
                <td>@item.High</td>
                <td>@item.Low</td>
                <td>@item.Close</td>
            </tr>
        }
        </tbody>
    </table>
}


<h3>Cryptocurrency Dashboard</h3>

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Symbol</th>
        <th>Last Price (USD)</th>
        <th>24h Change (%)</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var crypto in cryptoData)
    {
        <tr>
            <td>@crypto.Symbol</td>
            <td>@crypto.LastPrice</td>
            <td style="color:@(crypto.PriceChangePercent > 0 ? "green" : "red")">
                @crypto.PriceChangePercent %
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private decimal price;
    private bool loading = true;
    private string error;
    private List<Candlestick> historicalData;
    private List<MarketData> cryptoData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            price = await BinanceService.GetBitcoinPriceAsync("BTCUSDT");
            historicalData = await BinanceService.GetBitcoinPriceTimeseriesAsync("BTCUSDT", "1d", 30);
            cryptoData = await BinanceService.GetMultipleCryptosDataAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;  // Capture and display error
        }
        finally
        {
            loading = false;  // Hide the loading indicator after the call finishes
        }
    }
    
    private async Task RefreshPrice()
    {
        loading = true;
        error = null;
        price = await BinanceService.GetBitcoinPriceAsync("BTCUSDT");
        loading = false;
    }
}


